package main

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"strings"
	"time"

	"github.com/joho/godotenv"
	openai "github.com/sashabaranov/go-openai"
)

// Structures de donn√©es
type ProjectDetails struct {
	Idea          string `json:"idea"`
	TargetMarket  string `json:"targetMarket"`
	Competitors   string `json:"competitors"`
	UniqueAspect  string `json:"uniqueAspect"`
	BusinessModel string `json:"businessModel"`
}

// Variables globales
var examplePitches = []string{
	"Probl√®me: Les petits commer√ßants ont du mal √† g√©rer leur inventaire\nSolution: Une app mobile de gestion d'inventaire simplifi√©e\nClient cible: Petits commer√ßants ind√©pendants\nValeur: Gain de temps et r√©duction des erreurs\nCanaux: Boutique en ligne, r√©seaux sociaux",
	"Probl√®me: Manque de solutions de livraison rapide en zone rurale\nSolution: R√©seau de livreurs locaux √† v√©lo\nClient cible: Commerces ruraux et habitants\nValeur: Livraison en moins de 2h √† prix abordable\nCanaux: Partenariats avec commerces, site web",
}

// Fonction de g√©n√©ration avec OpenAI
func generateWithAI(details ProjectDetails) (string, error) {
	client := openai.NewClient(os.Getenv("OPENAI_API_KEY"))

	prompt := fmt.Sprintf(`G√©n√®re un pitch business professionnel en fran√ßais bas√© sur ces √©l√©ments:
	Id√©e: %s
	March√© cible: %s
	Aspect unique: %s
	Mod√®le √©conomique: %s
	
	Le pitch doit √™tre structur√© avec des sections claires et un ton persuasif. Inclure:
	1. Probl√®me identifi√©
	2. Solution propos√©e
	3. March√© cible
	4. Avantage comp√©titif
	5. Mod√®le √©conomique
	6. Potentiel de croissance`,
		details.Idea, details.TargetMarket, details.UniqueAspect, details.BusinessModel)

	resp, err := client.CreateChatCompletion(
		context.Background(),
		openai.ChatCompletionRequest{
			Model: openai.GPT3Dot5Turbo,
			Messages: []openai.ChatCompletionMessage{
				{
					Role:    openai.ChatMessageRoleUser,
					Content: prompt,
				},
			},
		},
	)

	if err != nil {
		return "", fmt.Errorf("erreur OpenAI: %v", err)
	}

	return resp.Choices[0].Message.Content, nil
}

// Fonction de g√©n√©ration locale (fallback)
func generateLocalPitch(details ProjectDetails) (string, error) {
	pitch := fmt.Sprintf(`**PITCH BUSINESS - %s**

üéØ **PROBL√àME IDENTIFI√â**
%s

üí° **SOLUTION PROPOS√âE**
%s

üë• **CLIENT CIBLE**
%s

‚≠ê **AVANTAGE COMP√âTITIF**
%s

üí∞ **MOD√àLE √âCONOMIQUE**
%s

üöÄ **POTENTIEL**
March√© en croissance avec opportunit√© de diff√©renciation.`,
		getValueOrDefault(details.Idea, "Id√©e innovante"),
		getValueOrDefault(details.Idea, "Probl√®me non sp√©cifi√©"),
		getValueOrDefault(details.Idea, "Solution innovante"),
		getValueOrDefault(details.TargetMarket, "March√© large"),
		getValueOrDefault(details.UniqueAspect, "Diff√©renciation claire"),
		getValueOrDefault(details.BusinessModel, "Mod√®le √† d√©finir"))

	return pitch, nil
}

// Fonction utilitaire pour g√©rer les valeurs vides
func getValueOrDefault(value, defaultValue string) string {
	if strings.TrimSpace(value) == "" {
		return defaultValue
	}
	return value
}

// Middleware CORS
func enableCORS(w http.ResponseWriter) {
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Access-Control-Allow-Methods", "GET, POST, OPTIONS")
	w.Header().Set("Access-Control-Allow-Headers", "Content-Type")
}

// Handlers HTTP
func pitchHandler(w http.ResponseWriter, r *http.Request) {
	enableCORS(w)

	if r.Method == http.MethodOptions {
		return
	}

	if r.Method != http.MethodPost {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	var details ProjectDetails
	err := json.NewDecoder(r.Body).Decode(&details)
	if err != nil {
		http.Error(w, "Invalid JSON: "+err.Error(), http.StatusBadRequest)
		return
	}

	if strings.TrimSpace(details.Idea) == "" {
		http.Error(w, "L'id√©e principale est requise", http.StatusBadRequest)
		return
	}

	var pitch string
	if os.Getenv("OPENAI_API_KEY") != "" {
		pitch, err = generateWithAI(details)
		if err != nil {
			log.Printf("Erreur OpenAI, fallback local: %v", err)
			pitch, err = generateLocalPitch(details)
		}
	} else {
		pitch, err = generateLocalPitch(details)
	}

	if err != nil {
		http.Error(w, "Erreur lors de la g√©n√©ration: "+err.Error(), http.StatusInternalServerError)
		return
	}

	newPitch := Pitch{
		ID:        fmt.Sprintf("%d", time.Now().Unix()),
		Content:   pitch,
		CreatedAt: time.Now(),
	}

	err = savePitch(newPitch)
	if err != nil {
		log.Printf("Erreur sauvegarde: %v", err)
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]string{
		"pitch": pitch,
		"id":    newPitch.ID,
	})
}

func examplesHandler(w http.ResponseWriter, r *http.Request) {
	enableCORS(w)

	if r.Method == http.MethodOptions {
		return
	}

	if r.Method != http.MethodGet {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(examplePitches)
}

func shareHandler(w http.ResponseWriter, r *http.Request) {
	enableCORS(w)

	if r.Method == http.MethodOptions {
		return
	}

	if r.Method != http.MethodPost {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	var data struct {
		Pitch string `json:"pitch"`
		Email string `json:"email"`
	}
	err := json.NewDecoder(r.Body).Decode(&data)
	if err != nil {
		http.Error(w, "Invalid JSON: "+err.Error(), http.StatusBadRequest)
		return
	}

	if !strings.Contains(data.Email, "@") {
		http.Error(w, "Adresse email invalide", http.StatusBadRequest)
		return
	}

	log.Printf("Pitch partag√© vers: %s", data.Email)

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]string{
		"status":  "success",
		"message": "Pitch partag√© avec succ√®s",
	})
}

func staticHandler(w http.ResponseWriter, r *http.Request) {
	if r.URL.Path == "/" {
		r.URL.Path = "/index.html"
	}
	http.ServeFile(w, r, "./frontend"+r.URL.Path)
}

func main() {
	err := godotenv.Load()
	if err != nil {
		log.Println("Fichier .env non trouv√©, utilisation des variables syst√®me")
	}

	err = initStorage()
	if err != nil {
		log.Printf("Erreur initialisation stockage: %v", err)
	}

	http.HandleFunc("/generate-pitch", pitchHandler)
	http.HandleFunc("/examples", examplesHandler)
	http.HandleFunc("/share", shareHandler)
	http.HandleFunc("/", staticHandler)

	port := os.Getenv("PORT")
	if port == "" {
		port = "8080"
	}

	log.Printf("Serveur d√©marr√© sur le port %s", port)
	log.Fatal(http.ListenAndServe(":"+port, nil))
}
